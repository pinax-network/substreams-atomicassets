syntax = "proto3";

package antelope.atomicassets.v1;

import "google/protobuf/any.proto"; // Import Any type

message AnyEvents {
  repeated AnyEvent items = 1;
}

message AnyEvent {
  oneof event {
    AssetsTableOperation AssetsTableItem = 1;
    TransferEvent TransferItem = 2;
    SchemasTableOperation SchemasTableItem = 3;
    CollectionsTableOperation CollectionsTableItem = 4;
    TemplatesTableOperation TemplatesTableItem = 5;
    BalancesTableOperation BalancesTableItem = 6;
    OffersTableOperation OffersTableItem = 7;
  }
}

message AssetsTableOperation {
  // trace information
  string trx_id = 1;

  // database operation
  int32 db_operation = 2;
  string scope = 3;

  // data payload
  uint64 asset_id = 4;
  string collection_name = 5;
  string schema_name = 6;
  int32 template_id = 7;
}

message TransferEvent {
  // trace information
  string trx_id = 1;
  string timestamp = 2;

  // data payload
  string collection_name = 3;
  string from = 4;
  string to = 5;
  repeated uint64 asset_ids = 6;
  string memo = 7;
}

message Format {
  string name = 1;
  string dtype = 2;
}

message SchemasTableOperation {
  // trace information
  string trx_id = 1;
  string timestamp = 2;

  // database operation
  int32 db_operation = 3;

  // data payload
  string collection_name = 4;
  string schema_name = 5;
  repeated Format format = 6;
}

message CollectionsTableOperation {
  // trace information
  string trx_id = 1;
  string timestamp = 2;

  // database operation
  int32 db_operation = 3;

  // data payload
  string collection_name = 4;
  string author = 5;
  bool allow_notify = 6;
  repeated string authorized_accounts = 7;
  repeated string notify_accounts = 8;
  double market_fee = 9;
}

message TemplatesTableOperation {
  // trace information
  string trx_id = 1;
  string timestamp = 2;

  // database operation
  int32 db_operation = 3;

  // data payload
  int32 template_id = 4;
  string schema_name = 5;
  bool transferable = 6;
  bool burnable = 7;
  uint32 max_supply = 8;
  uint32 issued_supply = 9;
}

message BalancesTableOperation {
  // trace information
  string trx_id = 1;
  string timestamp = 2;

  // database operation
  int32 db_operation = 3;
  
  // data payload
  string owner = 4;
  repeated string quantities = 5;
}

message OffersTableOperation {
  // trace information
  string trx_id = 1;
  string timestamp = 2;

  // database operation
  int32 db_operation = 3;
  
  uint64 offer_id = 4;
  string sender = 5;
  string recipient = 6;
  repeated uint64 sender_asset_ids = 7;
  repeated uint64 recipient_asset_ids = 8;
  string memo = 9;
  string ram_payer = 10;
}